
func add(a: i32, b: i32) -> i32 {
	return a + b;
}

inl func is_even(v: u32) -> i8 {
	return v % 2 == 0;
}

func print_remainder(a: i32, b: i32) {
	print_i32(a % b);
}

inl func increment(v: &mut i32) {
	*v += 1;
}

func invoke(f: func(i32, i32) -> i32, a: i32, b: i32) -> i32 {
	return f(a, b);
}


{TODO: ???????????
	TODO: ???????????
	func do_something(x: ref mut i64, arr: ref mut [i8]) {
		x += 10;
	}

	TODO: ???????????
	func do_something(x: & mut i64, arr: &mut [i8]) {
		*x += 10;
	}

	do_something(ref my_arr)
	do_something(&my_arr)









	// .c
	void t()
	{
		uint8_t arr[10];
		uint8_t* arr_view = arr;
	}

	// .prm
	func t() {
		let arr: &[u8, 10];
		let arr_view: &mut [u8] = &arr

		let a: i8 = 0
		let b: i8 = 1

		token_symbol_ref
		token_symbol_bitwise_and

		if 15 & *&a + b {
			// ... ;
		}
	}

	// .prm
	func t() {
		let arr: mut [u8, 10];
		let arr_view: ref mut [u8] = ref arr
	}





	func t(string: &mut [c8]) 
	{
		string[0] = 'a';
	}

	ext func puts(string: &[c8]) -> i32;

	func main() -> i32 {
		let message: &[c8] = "hello, world!\n"
		puts(message);
		return 0;
	}


}



func test() {
	{
		let result: i32 = invoke(func(a: i32, b: i32) -> i32 {
			return a * b;
		}, 11, 15);
	}

	{
		let result: i32 = invoke(add, 11, 15);
	}
}
