
func do_something(x: &mut i64, arr: &mut [i8]) {
	*x += 10;
	arr[0i8] = 10;
}

let x: mut i64 = 1;
let arr: mut [i8, 10];
do_something(&mut x, &mut arr);

// --------------------------------------------------

func t() {
	let arr: mut [u8, 10];
	let const_arr_view: &[u8] = &arr;
	let mut_arr_view: &mut [u8] = &mut arr;
}

// --------------------------------------------------

func t() {
	unsafe {
		let reg_a: &u8 = 0x0101;
	}
}

// --------------------------------------------------

func f() {
	let var: mut u16 = 10;
	let var_ref: &mut u16 = &mut var;

	let cvar: u16 = 10;
	let cvar_ref: &u16 = &cvar;

	let arr: mut [u16, 10];
	let arr_ref: &mut [u16] = &mut arr;

	let carr: [u16, 10];
	let carr_ref: &[u16] = &carr;
}

// --------------------------------------------------

func f() {
	let arr: mut [u16, 10];
	let arr_view1: &mut [u16] = &mut arr;
	let arr_view2: &mut [u16] = &mut arr[2:];
	let arr_view3: &mut [u16] = &mut arr[5:];
}

// --------------------------------------------------

func f(a: &mut i16, b: &i16, c: &i16) {
	a = 10; // only the value - reference is immutable!
	a += 1; // only the value - reference is immutable!
}

// --------------------------------------------------

func f() {
	let var: mut f32 = 0;
	let ver_ref: &mut f32 = &mut var;
	let ver_ptr: *mut f32 = &mut var;
}

// --------------------------------------------------

struct vector_s {
	data: *mut u8,
	capacity: u64,
	count: u64
}

func vector_create(capacity: u64) -> vector_s {
	vector_s v;
	v.data = (uint8_t*)malloc(capacity * sizeof(uint8_t));
	assert(v.data);
	v.capacity = capacity;
	v.count = 0;
	return v;
}
